# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
#https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/build-artifacts?view=azure-devops&tabs=yaml
#https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml-task
#Your build pipeline references an undefined variable named ‘Parameters.RestoreBuildProjects’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972

trigger:
- main1

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
steps:
- task: CmdLine@2
  inputs:
          script: |
            pushd simple-feed-reader
            dotnet restore
  displayName: "Restore packages"

- task: CmdLine@2
  inputs:
          script: |
            pushd simple-feed-reader
            dotnet build
  displayName: "Build packages"


- task: CmdLine@2
  inputs:
          script: |
            pushd simple-feed-reader
            dotnet test
  displayName: "Test packages"
#- task: CmdLine@2
  #inputs:
          #script: |
           # pushd simple-feed-reader
            #dotnet publish --no-build --output $(build.artifactstagingdirectory)'
  #displayName: "Publish packages"  
  
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'myWebsiteName'
#- task: ArchiveFiles@2
 # inputs:
  #        rootFolderOrFile: $(build.artifactstagingdirectory)'
   #       includeRootFolder: false
    #      archiveType: 'zip'
     #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      #    replaceExistingArchive: true
  #displayName: 'Archive API'
#- task: PublishBuildArtifacts@1
 # inputs:
  #        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
   #       ArtifactName: 'dropAPI'
    #      publishLocation: 'Container'
  #displayName: 'Publish Artifact API'  